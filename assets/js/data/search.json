[
  
  {
    "title": "Jekyll plugins/complementos",
    "url": "/posts/jekyll-plugins-add/",
    "categories": "SSG, Jekyll, Linux",
    "tags": "writing",
    "date": "2024-10-10 08:10:00 +0200",
    





    
    "snippet": "Los complementos (plugins) de Jekyll permiten crear contenido personalizado y específico para el sitio. Hay muchos complementos disponibles e incluso se puede escribir los propios.En esta entrada s...",
    "content": "Los complementos (plugins) de Jekyll permiten crear contenido personalizado y específico para el sitio. Hay muchos complementos disponibles e incluso se puede escribir los propios.En esta entrada se indica como agregar tres complementos (plugins) oficiales que son útiles en cualquier sitio de Jekyll. Estos son:  jekyll-sitemap: crea un archivo de mapa del sitio para ayudar a los motores de búsqueda a indexar el contenido.  jekyll-feed: Crea un canal RSS para tus publicaciones.  jekyll-seo-tag: agrega metaetiquetas para ayudar con el SEO.Configuración de los pluginsAgregarlos al GemfilePara utilizar los plugins hay que agregarlos al Gemfile. Si estos son colocados en un grupo jekyll_plugins, Jekyll los requerirá automáticamente. Si el fichero Gemfile ya existe agrega el siguiente contenido:source 'https://rubygems.org'gem \"jekyll\"group :jekyll_plugins do  gem \"jekyll-sitemap\"  gem \"jekyll-feed\"  gem \"jekyll-seo-tag\"endNota: en el caso actual, como Gemfile ya existía se agrego el contenido.Agregando los plugins en _config.ymlLos plugins para ser utilizados deben ser agregados al _config.yml. Esto es agregar el contenido:plugins:  - jekyll-feed  - jekyll-sitemap  - jekyll-seo-tagInstalación de los pluginsPara instalar los plugins basta ejecutar bundle update. Se realiza a continuación.bundle updateConfiguraciones extras  El pluginjekyll-sitemap no necesita ninguna configuración extra, este creará el mapa del sitio durante la compilación.  Para jekyll-feedy jekyll-seo-tag se necesita agregar etiquetas a _layouts/default.html, ajustando según corresponda. Estas etiquetas son {% feed_meta %} y {% seo %}. A continuación se muestra un ejemplo (ajustar según corresponda):&lt;!doctype html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta charset=\"utf-8\"&gt;    &lt;title&gt;{{ page.title }}&lt;/title&gt;    &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt;    {% feed_meta %}    {% seo %}  &lt;/head&gt;  &lt;body&gt;    {% include navigation.html %}    {{ content }}  &lt;/body&gt;&lt;/html&gt;Luego de la anterior configuración, reiniciar el servidor Jekyll y verificar que las etiquetas se hayan agregado al archivo en el bloque correspondiente &lt;head&gt; del HTML."
  },
  
  {
    "title": "Hugo - theme Toha",
    "url": "/posts/ssg-hugo-theme-toha/",
    "categories": "SSG, Hugo, Go, Generadores de sitios estáticos",
    "tags": "writing",
    "date": "2024-10-08 08:10:00 +0200",
    





    
    "snippet": "En esta entrada se resume como desplegar un sitio en el localhost con el generador Hugo, y aplicar el theme Toha.Creando sitio Hugo con theme TohaPre requisitos instalados, supuestos cumplidos  nod...",
    "content": "En esta entrada se resume como desplegar un sitio en el localhost con el generador Hugo, y aplicar el theme Toha.Creando sitio Hugo con theme TohaPre requisitos instalados, supuestos cumplidos  node.js, npm, go, hugo, git: instalado.  Repositorio con GitHub Page o Gitlab Page (o similar): git@github.com:&lt;username&gt;/&lt;nombre_repo&gt;.io.git.Verificaciones pre requisitosgithub-danielzamo$ hugo version; go version; node -v; npm -vhugo v0.136.2+extended linux/amd64 BuildDate=2024-10-17T14:30:05Z VendorInfo=brewgo version go1.22.7 linux/amd64v20.17.010.9.0Configurando theme TohaNota el autor: en este artículo se configura el theme Toha consultando principalmente este artículo. El desarrollador del propio aquí comparte una guía rápida de como poner a funcionar el tema.github-danielzamo$ mkdir hugo-theme-toha-dzdevelgithub-danielzamo/hugo-theme-toha-dzdevel$ cd hugo-theme-toha-dzdevel/github-danielzamo/hugo-theme-toha-dzdevel$ hugo new site ./ --format=yaml --forcegithub-danielzamo/hugo-theme-toha-dzdevel$ hugo mod init github.com/danielzamo/danielzamo.github.iogithub-danielzamo/hugo-theme-toha-dzdevel$ cp hugo.yaml{,.org}# Agregar el theme (fichero hugo.yaml)github-danielzamo/hugo-theme-toha-dzdevel$ cat hugo.yamlbaseURL: https://danielzamo.github.io/languageCode: en-ustitle: hugo theme toha dzdevelmodule:  imports:  - path: github.com/hugo-toha/toha/v4  mounts:  - source: ./node_modules/flag-icon-css/flags    target: static/flags  - source: ./node_modules/@fontsource/mulish/files    target: static/files  - source: ./node_modules/katex/dist/fonts    target: static/fonts# Ejecutar los comandos para descargar el theme e instalar sus dependenciasgithub-danielzamo/hugo-theme-toha-dzdevel$ hugo mod get -ugithub-danielzamo/hugo-theme-toha-dzdevel$ hugo mod tidygithub-danielzamo/hugo-theme-toha-dzdevel$ hugo mod npm packgithub-danielzamo/hugo-theme-toha-dzdevel$ npm installgithub-danielzamo/hugo-theme-toha-dzdevel$ npm audit fix --force#&gt;github-danielzamo/hugo-theme-toha-dzdevel$ npm auditEjecutar el sitio localmenteSi todo ha ido bien se puede ahora ejecutar el sitio en el localhost. Para lo cual se ejecuta:github-danielzamo/hugo-theme-toha-dzdevel$ hugo server -wEn esta captura se muestra el sitio generado/publicado.Referencia  Theme Toha - quickstart.  Hugo - theme Toha - Prepare Your Site"
  },
  
  {
    "title": "Jekyll tema Chirpy",
    "url": "/posts/jekyll-theme-chirpy/",
    "categories": "SSG, Jekyll, Linux, Jekyll-Chirpy",
    "tags": "writing",
    "date": "2024-08-08 08:10:00 +0200",
    





    
    "snippet": "En esta entrada se resume como ha sido desplegado inicialmente este con el SSG Jekyll este sitio web de contenido estático. Y como se aplico el theme Chirpy para luego publicarlo sobre GitHub Page....",
    "content": "En esta entrada se resume como ha sido desplegado inicialmente este con el SSG Jekyll este sitio web de contenido estático. Y como se aplico el theme Chirpy para luego publicarlo sobre GitHub Page.Instalando/desplegando theme ChirpySupuestos cumplidos  Node: instalado.  Jekyll y Bundle: instalado.  git: instalado.  Sistema Linux disponible: Fedora 40.  Repositorio con Git Page: &lt;username&gt;.github.io.Instalación/despliegue inicialEn este apartado despliego el sitio estático generado con Jekyll y configuro el theme Chirpy.git clone https://github.com/cotes2020/jekyll-theme-chirpy.git theme-chirpy/cd theme-chirpybash tools/init.shbundle#bundle install## Para usar ejecutar el jenkyll servebundle exec jekyll sPublicando sitio en repositorio Github Pageecho \"destination: public\" &gt;&gt;  _config.ymlrm -rf publicgit clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git publicbundle exec jekyll buildcd public/git add .git commit -m \"first commit, sitio estático generador Jekyll, tema Chirpy\"git push"
  },
  
  {
    "title": "Jekyll - deprecated @import",
    "url": "/posts/jekyll-change-import/",
    "categories": "SSG, Jekyll, Linux, Jekyll-Chirpy",
    "tags": "writing",
    "date": "2024-08-08 08:10:00 +0200",
    





    
    "snippet": "En esta entrada se indica uno de los “cambios radicales” respecto a @import y/o funciones globales del propio preprocesador CSS Sass.Migración del theme ChirpyEn este sitio generado por Jekyll, y d...",
    "content": "En esta entrada se indica uno de los “cambios radicales” respecto a @import y/o funciones globales del propio preprocesador CSS Sass.Migración del theme ChirpyEn este sitio generado por Jekyll, y donde se aplico el theme Chirpy, se ejecutaron los siguientes comandos para actualizar automáticamente las hojas de estilo y utilizar el nuevo sistema de módulos.Método 1: migración autómaticasudo npm install -g sass-migratorbundle exec jekyll ssass-migrator module --migrate-deps &lt;your-entrypoint.scss&gt;Método 2: Instalar una versión antiguaEn este opción se especifica de instalar una gema con versión más antigua de Sass. Al soportar aun el import (no es lo que recomienda el desarrollador - referencia Sass Breaking Change: @import…) las advertencias no serán mostradas.Esto es, sin hacer aún el cambio inmediato en el código del theme, se puede tratar de mantener la compatibilidad con la versión actual de Sass. Para hacerlo, se utiliza una versión de Sass que aún soporte @import. Esto lo hacemos añadiendo dicha versión compatible de Sass al Gemfile o actualizando en npm.Por ejemplo, especificamos una versión más antigua de Sass en el Gemfile:gem 'sassc', '~&gt; 2.4'  # Versión que aún soporta @importY ejecutamos:bundle installReferenciasLos siguiente URL han sido consultados  Breaking Change: @import and global built-in functions."
  }
  
]

