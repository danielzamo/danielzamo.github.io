<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://danielzamo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://danielzamo.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-10-23T03:04:36+02:00</updated><id>https://danielzamo.github.io/feed.xml</id><title type="html">Docs</title><subtitle>Chirpy un tema de Jekyll minimalista, responsivo y rico en funciones para redacción técnica</subtitle><entry><title type="html">Jekyll plugins/complementos</title><link href="https://danielzamo.github.io/posts/jekyll-plugins-add/" rel="alternate" type="text/html" title="Jekyll plugins/complementos" /><published>2024-10-10T08:10:00+02:00</published><updated>2024-10-10T08:10:00+02:00</updated><id>https://danielzamo.github.io/posts/jekyll-plugins-add</id><content type="html" xml:base="https://danielzamo.github.io/posts/jekyll-plugins-add/"><![CDATA[<p>Los complementos (plugins) de Jekyll permiten crear contenido personalizado y específico para el sitio. Hay muchos complementos disponibles e incluso se puede escribir los propios.</p>

<p>En esta entrada se indica como agregar tres complementos (plugins) oficiales que son útiles en cualquier sitio de Jekyll. Estos son:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">jekyll-sitemap</code>: crea un archivo de mapa del sitio para ayudar a los motores de búsqueda a indexar el contenido.</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll-feed</code>: Crea un canal RSS para tus publicaciones.</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll-seo-tag</code>: agrega metaetiquetas para ayudar con el SEO.</li>
</ul>

<h2 id="configuración-de-los-plugins">Configuración de los plugins</h2>

<h3 id="agregarlos-al-gemfile">Agregarlos al Gemfile</h3>

<p>Para utilizar los plugins hay que agregarlos al <code class="language-plaintext highlighter-rouge">Gemfile</code>. Si estos son colocados en un grupo <code class="language-plaintext highlighter-rouge">jekyll_plugins</code>, <em>Jekyll</em> los requerirá automáticamente. Si el fichero <code class="language-plaintext highlighter-rouge">Gemfile</code> ya existe agrega el siguiente contenido:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s2">"jekyll"</span>

<span class="n">group</span> <span class="ss">:jekyll_plugins</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"jekyll-sitemap"</span>
  <span class="n">gem</span> <span class="s2">"jekyll-feed"</span>
  <span class="n">gem</span> <span class="s2">"jekyll-seo-tag"</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><em>Nota:</em> en el caso actual, como <code class="language-plaintext highlighter-rouge">Gemfile</code> ya existía se agrego el contenido.</p>

<h3 id="agregando-los-plugins-en-_configyml">Agregando los plugins en _config.yml</h3>

<p>Los plugins para ser utilizados deben ser agregados al <code class="language-plaintext highlighter-rouge">_config.yml</code>. Esto es agregar el contenido:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-feed</span>
  <span class="pi">-</span> <span class="s">jekyll-sitemap</span>
  <span class="pi">-</span> <span class="s">jekyll-seo-tag</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="instalación-de-los-plugins">Instalación de los plugins</h3>

<p>Para instalar los plugins basta ejecutar <code class="language-plaintext highlighter-rouge">bundle update</code>. Se realiza a continuación.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>bundle update
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="configuraciones-extras">Configuraciones extras</h4>

<ul>
  <li>El plugin<code class="language-plaintext highlighter-rouge">jekyll-sitemap</code> no necesita ninguna configuración extra, este creará el mapa del sitio durante la compilación.</li>
  <li>Para <code class="language-plaintext highlighter-rouge">jekyll-feed</code>y <code class="language-plaintext highlighter-rouge">jekyll-seo-tag</code> se necesita agregar etiquetas a <code class="language-plaintext highlighter-rouge">_layouts/default.html</code>, ajustando según corresponda. Estas etiquetas son <code class="language-plaintext highlighter-rouge">{% feed_meta %}</code> y <code class="language-plaintext highlighter-rouge">{% seo %}</code>. A continuación se muestra un ejemplo (ajustar según corresponda):</li>
</ul>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>{{ page.title }}<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/styles.css"</span><span class="nt">&gt;</span>
    {% feed_meta %}
    {% seo %}
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    {% include navigation.html %}
    {{ content }}
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Luego de la anterior configuración, reiniciar el servidor Jekyll y verificar que las etiquetas se hayan agregado al archivo en el bloque correspondiente <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> del HTML.</p>]]></content><author><name>Daniel Oscar Zamo</name></author><category term="SSG" /><category term="Jekyll" /><category term="Linux" /><category term="writing" /><summary type="html"><![CDATA[Los complementos (plugins) de Jekyll permiten crear contenido personalizado y específico para el sitio. Hay muchos complementos disponibles e incluso se puede escribir los propios.]]></summary></entry><entry><title type="html">Hugo - theme Toha</title><link href="https://danielzamo.github.io/posts/ssg-hugo-theme-toha/" rel="alternate" type="text/html" title="Hugo - theme Toha" /><published>2024-10-08T08:10:00+02:00</published><updated>2024-10-08T08:10:00+02:00</updated><id>https://danielzamo.github.io/posts/ssg-hugo-theme-toha</id><content type="html" xml:base="https://danielzamo.github.io/posts/ssg-hugo-theme-toha/"><![CDATA[<p>En esta entrada se resume como desplegar un sitio en el localhost con el generador Hugo, y aplicar el theme Toha.</p>

<p><img src="/assets/img/theme-toha-initial.png" alt="theme-toha-initial" /></p>

<h2 id="creando-sitio-hugo-con-theme-toha">Creando sitio Hugo con theme Toha</h2>

<h3 id="pre-requisitos-instalados-supuestos-cumplidos">Pre requisitos instalados, supuestos cumplidos</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">node.js</code>, <code class="language-plaintext highlighter-rouge">npm</code>, <code class="language-plaintext highlighter-rouge">go</code>, <code class="language-plaintext highlighter-rouge">hugo</code>, <code class="language-plaintext highlighter-rouge">git</code>: instalado.</li>
  <li>Repositorio con GitHub Page o Gitlab Page (o similar): <code class="language-plaintext highlighter-rouge">git@github.com:&lt;username&gt;/&lt;nombre_repo&gt;.io.git</code>.</li>
</ul>

<h3 id="verificaciones-pre-requisitos">Verificaciones pre requisitos</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>github-danielzamo<span class="nv">$ </span>hugo version<span class="p">;</span> go version<span class="p">;</span> node <span class="nt">-v</span><span class="p">;</span> npm <span class="nt">-v</span>
hugo v0.136.2+extended linux/amd64 <span class="nv">BuildDate</span><span class="o">=</span>2024-10-17T14:30:05Z <span class="nv">VendorInfo</span><span class="o">=</span>brew
go version go1.22.7 linux/amd64
v20.17.0
10.9.0
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="configurando-theme-toha">Configurando theme Toha</h3>

<p><strong><em>Nota el autor:</em></strong> en este artículo se configura el theme Toha consultando principalmente <a href="https://toha-guides.netlify.app/posts/getting-started/prepare-site/">este artículo</a>. El desarrollador del propio <a href="https://toha-guides.netlify.app/posts/quickstart/">aquí</a> comparte una guía rápida de como poner a funcionar el tema.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre>github-danielzamo<span class="nv">$ </span><span class="nb">mkdir </span>hugo-theme-toha-dzdevel
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span><span class="nb">cd </span>hugo-theme-toha-dzdevel/

github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo new site ./ <span class="nt">--format</span><span class="o">=</span>yaml <span class="nt">--force</span>
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo mod init github.com/danielzamo/danielzamo.github.io

github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span><span class="nb">cp </span>hugo.yaml<span class="o">{</span>,.org<span class="o">}</span>
<span class="c"># Agregar el theme (fichero hugo.yaml)</span>
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span><span class="nb">cat </span>hugo.yaml
baseURL: https://danielzamo.github.io/
languageCode: en-us
title: hugo theme toha dzdevel

module:
  imports:
  - path: github.com/hugo-toha/toha/v4
  mounts:
  - <span class="nb">source</span>: ./node_modules/flag-icon-css/flags
    target: static/flags
  - <span class="nb">source</span>: ./node_modules/@fontsource/mulish/files
    target: static/files
  - <span class="nb">source</span>: ./node_modules/katex/dist/fonts
    target: static/fonts

<span class="c"># Ejecutar los comandos para descargar el theme e instalar sus dependencias</span>
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo mod get <span class="nt">-u</span>
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo mod tidy
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo mod npm pack
github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>npm <span class="nb">install
</span>github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>npm audit fix <span class="nt">--force</span>
<span class="c">#&gt;github-danielzamo/hugo-theme-toha-dzdevel$ npm audit</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="ejecutar-el-sitio-localmente">Ejecutar el sitio localmente</h3>

<p>Si todo ha ido bien se puede ahora ejecutar el sitio en el localhost. Para lo cual se ejecuta:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>github-danielzamo/hugo-theme-toha-dzdevel<span class="nv">$ </span>hugo server <span class="nt">-w</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>En <a href="/assets/img/theme-toha-initial.png">esta captura</a> se muestra el sitio generado/publicado.</p>

<h2 id="referencia">Referencia</h2>

<ul>
  <li><a href="https://toha-guides.netlify.app/posts/quickstart/">Theme Toha - quickstart</a>.</li>
  <li><a href="https://toha-guides.netlify.app/posts/getting-started/prepare-site/">Hugo - theme Toha - Prepare Your Site</a></li>
</ul>

<!-- ![Desktop View](/assets/img/sample/mockup.png){: width="700" height="400" } -->]]></content><author><name>Daniel Oscar Zamo</name></author><category term="SSG" /><category term="Hugo" /><category term="Go" /><category term="Generadores de sitios estáticos" /><category term="writing" /><summary type="html"><![CDATA[En esta entrada se resume como desplegar un sitio en el localhost con el generador Hugo, y aplicar el theme Toha.]]></summary></entry><entry><title type="html">Jekyll - deprecated @import</title><link href="https://danielzamo.github.io/posts/jekyll-change-import/" rel="alternate" type="text/html" title="Jekyll - deprecated @import" /><published>2024-08-08T08:10:00+02:00</published><updated>2024-08-08T08:10:00+02:00</updated><id>https://danielzamo.github.io/posts/jekyll-change-import</id><content type="html" xml:base="https://danielzamo.github.io/posts/jekyll-change-import/"><![CDATA[<p>En esta entrada se indica uno de los “cambios radicales” respecto a <code class="language-plaintext highlighter-rouge">@import</code> y/o funciones globales del propio preprocesador CSS Sass.</p>

<h2 id="migración-del-theme-chirpy">Migración del theme Chirpy</h2>

<p>En este sitio generado por Jekyll, y donde se aplico el theme Chirpy, se ejecutaron los siguientes comandos para actualizar automáticamente las hojas de estilo y utilizar el nuevo sistema de módulos.</p>

<h3 id="método-1-migración-autómatica">Método 1: migración autómatica</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nb">sudo </span>npm <span class="nb">install</span> <span class="nt">-g</span> sass-migrator
bundle <span class="nb">exec </span>jekyll s
sass-migrator module <span class="nt">--migrate-deps</span> &lt;your-entrypoint.scss&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="método-2-instalar-una-versión-antigua">Método 2: Instalar una versión antigua</h3>

<p>En este opción se especifica de instalar una gema con versión más antigua de Sass. Al soportar aun el import (no es lo que recomienda el desarrollador - referencia <a href="https://sass-lang.com/documentation/breaking-changes/import/" title="breaking change">Sass Breaking Change: @import…</a>) las advertencias no serán mostradas.</p>

<p>Esto es, sin hacer aún el cambio inmediato en el código del theme, se puede tratar de mantener la compatibilidad con la versión actual de Sass. Para hacerlo, se utiliza una versión de Sass que aún soporte <code class="language-plaintext highlighter-rouge">@import</code>. Esto lo hacemos añadiendo dicha versión compatible de Sass al <code class="language-plaintext highlighter-rouge">Gemfile</code> o actualizando en <code class="language-plaintext highlighter-rouge">npm</code>.</p>

<p>Por ejemplo, especificamos una versión más antigua de Sass en el Gemfile:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>gem <span class="s1">'sassc'</span>, <span class="s1">'~&gt; 2.4'</span>  <span class="c"># Versión que aún soporta @import</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Y ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>bundle <span class="nb">install</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="referencias">Referencias</h2>

<p>Los siguiente URL han sido consultados</p>

<ul>
  <li><a href="https://sass-lang.com/documentation/breaking-changes/import/" title="breaking change">Breaking Change: <code class="language-plaintext highlighter-rouge">@import</code> and global built-in functions</a>.</li>
</ul>]]></content><author><name>Daniel Oscar Zamo</name></author><category term="SSG" /><category term="Jekyll" /><category term="Linux" /><category term="Jekyll-Chirpy" /><category term="writing" /><summary type="html"><![CDATA[En esta entrada se indica uno de los “cambios radicales” respecto a @import y/o funciones globales del propio preprocesador CSS Sass.]]></summary></entry><entry><title type="html">Jekyll tema Chirpy</title><link href="https://danielzamo.github.io/posts/jekyll-theme-chirpy/" rel="alternate" type="text/html" title="Jekyll tema Chirpy" /><published>2024-08-08T08:10:00+02:00</published><updated>2024-08-08T08:10:00+02:00</updated><id>https://danielzamo.github.io/posts/jekyll-theme-chirpy</id><content type="html" xml:base="https://danielzamo.github.io/posts/jekyll-theme-chirpy/"><![CDATA[<p>En esta entrada se resume como ha sido desplegado inicialmente este con el SSG Jekyll este sitio web de contenido estático. Y como se aplico el theme Chirpy para luego publicarlo sobre GitHub Page.</p>

<h2 id="instalandodesplegando-theme-chirpy">Instalando/desplegando theme Chirpy</h2>

<h3 id="supuestos-cumplidos">Supuestos cumplidos</h3>

<ul>
  <li>Node: instalado.</li>
  <li>Jekyll y Bundle: instalado.</li>
  <li>git: instalado.</li>
  <li>Sistema Linux disponible: Fedora 40.</li>
  <li>Repositorio con Git Page: <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>.</li>
</ul>

<h2 id="instalacióndespliegue-inicial">Instalación/despliegue inicial</h2>

<p>En este apartado despliego el sitio estático generado con Jekyll y configuro el theme Chirpy.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>git clone https://github.com/cotes2020/jekyll-theme-chirpy.git theme-chirpy/
<span class="nb">cd </span>theme-chirpy
bash tools/init.sh
bundle
<span class="c">#bundle install</span>
<span class="c">## Para usar ejecutar el jenkyll serve</span>
bundle <span class="nb">exec </span>jekyll s
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="publicando-sitio-en-repositorio-github-page">Publicando sitio en repositorio Github Page</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s2">"destination: public"</span> <span class="o">&gt;&gt;</span>  _config.yml
<span class="nb">rm</span> <span class="nt">-rf</span> public
git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git public
bundle <span class="nb">exec </span>jekyll build
<span class="nb">cd </span>public/
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"first commit, sitio estático generador Jekyll, tema Chirpy"</span>
git push
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Daniel Oscar Zamo</name></author><category term="SSG" /><category term="Jekyll" /><category term="Linux" /><category term="Jekyll-Chirpy" /><category term="writing" /><summary type="html"><![CDATA[En esta entrada se resume como ha sido desplegado inicialmente este con el SSG Jekyll este sitio web de contenido estático. Y como se aplico el theme Chirpy para luego publicarlo sobre GitHub Page.]]></summary></entry></feed>